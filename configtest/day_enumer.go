// Code generated by "enumer --config day.yaml"; DO NOT EDIT.

package main

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
)

const _DayName = "MondayTuesdayWednesdayThursdayFridaySaturdaySunday"

var _DayIndex = [...]uint8{0, 6, 13, 22, 30, 36, 44, 50}

func (i Day) String() string {
	i -= 1
	if i < 0 || i >= Day(len(_DayIndex)-1) {
		return fmt.Sprintf("Day(%d)", i+1)
	}
	return _DayName[_DayIndex[i]:_DayIndex[i+1]]
}

var _DayValues = []Day{1, 2, 3, 4, 5, 6, 7}

var _DayNameToValueMap = map[string]Day{
	_DayName[0:6]:   1,
	_DayName[6:13]:  2,
	_DayName[13:22]: 3,
	_DayName[22:30]: 4,
	_DayName[30:36]: 5,
	_DayName[36:44]: 6,
	_DayName[44:50]: 7,
}

// DayString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func DayString(s string) (Day, error) {
	if val, ok := _DayNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Day values", s)
}

// DayValues returns all values of the enum
func DayValues() []Day {
	return _DayValues
}

// IsADay returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Day) IsADay() bool {
	for _, v := range _DayValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Day
func (i Day) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Day
func (i *Day) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Day should be a string, got %s", data)
	}

	var err error
	*i, err = DayString(s)
	return err
}

// MarshalYAML implements a YAML Marshaler for Day
func (i Day) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for Day
func (i *Day) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = DayString(s)
	return err
}

func (i Day) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *Day) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	str, ok := value.(string)
	if !ok {
		bytes, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("value is not a byte slice")
		}

		str = string(bytes[:])
	}

	val, err := DayString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
